---
layout: post
title:  "자바로 배우는 핵심 자료구조와 알고리즘 - 기록"
categories: daily study
---

책 - 자바로 배우는 핵심 자료구조와 알고리즘으로 자료구조 깨우쳐보기

컴공 교양과목중 자바 프로그래밍을 배우면서 자바에 많은 흥미가 생겼다. 그래서 자바를 이용하여 자료구조와 알고리즘을 배워보고 싶어서 다음과 같은 책을 읽으면서 공부한 내용을 간단하게나마 적어서 기억을 해보려고 한다.

## 인터페이스
interface란 메서드들의 집합을 의미한다. 

### List interface
이 interface는 add, get, remove 같은 우리가 흔히 아는 ArrayList같은 클래스속 사용가능한 메서드들의 집합으로 구성이 되어있다. 

interface는 정해진 클래스를 통해 사용할 수도 있지만 (예를 들어 ArrayList, LinkedList...) 직접 클래스를 생성하여 사용을 할 수도 있다. 
```java
public class ListClientExample {
	@SuppressWarnings("rawtypes")
	private List list;

	@SuppressWarnings("rawtypes")
	public ListClientExample() {
		list = new LinkedList();
	}

	@SuppressWarnings("rawtypes")
	public List getList() {
		return list;
	}

	public static void main(String[] args) {
		ListClientExample lce = new ListClientExample();
		@SuppressWarnings("rawtypes")
		List list = lce.getList();
		System.out.println(list);
	}
}
// 개발자의 코드 인용
```

즉 앞으로는 라이브러리를 사용할 때 특정 클래스들을 구현하려고 하는 것이 아닌, 훨씬 기본이 되는 interface에 의존을 해야한다. 

그래서 interface는 한번 생성된 이상 코드를 변경하면 안된다. (모든 클래스에서 구현해야하는 코드들이 변경될 수 있기 때문?)

### 실습 2
이 책에는 각 챕터마다 실습이 존재하여, 직접 배운 내용을 실습을 통해 확인해 볼 수 있고, JUnit을 이용하여 나의 코드가 알맞은 지도 확인 할 수 있다.

실습에서 구현한 것은 직접 메서드를 구현하는 것이었다. (interface에서 받아온)

oracle.docs를 이용하여 거기에 나온 설명대로 구현하는 것이었는데, 사실 영어 실력을 조금 더 길러야겠다는 생각이 많이 들었다.

## 계속해서... 인터페이스이용한 자료구조 공부
### LinkedList
![](https://velog.velcdn.com/images/jinhuyk/post/1ba454bf-8b49-4c23-8a1e-3ba551fdffd3/image.png)
다음처럼 구현되는 List의 형태로, ArrayList와 마찬가지로, List Interface를 가지고 있다.

이 책에서는 이미 만들어진 LinkedList Class를 이용하지 않고, 직접 이 자료구조의 메서드들을 구현할 수 있게 하였다.

```java
	@Override
	public void add(int index, E element) {
		// no need to check bounds; getNode does it.
		if (index == 0) {
			head = new Node(element, head);
		} else {
			Node node = getNode(index-1);
			node.next = new Node(element, node.next);
		}
		size++;
	}
    
    @Override
	public int indexOf(Object target) {
		Node node = head;
		for (int i=0; i<size; i++) {
			if (equals(target, node.cargo)) {
				return i;
			}
			node = node.next;
		}
		return -1;
	}
    
    @Override
    public E remove(int index) {
		E element = get(index);
		if (index == 0) {
			head = head.next;
		} else {
			Node node = getNode(index-1);
			node.next = node.next.next;
		}
		size--;
		return element;
	}
```
직접 add, remove, indexOf 메서드들을 만들어 보면서, LinkedList가 어떤식으로 작동이 되는지에 대해 알게 되었다.

### ArrayList와 LinkedList 구현 비교
![](https://velog.velcdn.com/images/jinhuyk/post/f0cad7ad-029f-4ee0-a964-7eef230d5720/image.png)

직접 구현해보면서 알게 된 것인데, 사소하게 어떤 메서드를 쓰느냐에도 시간이 오래걸릴 수도 있다는 것을 느낄 수 있었다. 항상 알고리즘 문제풀때, 배열만 계속 사용했는데, 앞으로는 이런 것들을 고려해서 프로젝트 등에서 사용해야 할 것같다. 

### 검색엔진
chapter06부터는 트리 순회를 보면서 검색엔진부터 다룬다. 이 책의 최종 목표들은 이런 자료구조들을 공부 한 후 이를 이용하여 검색엔진을 만드는 것이라고 한다.

검색 엔진은 3가지 요소가 있다.
크롤링 - 웹페이지를 다운, 파싱 텍스트와 다른 페이지로의 링크 추출
인덱싱 - 검색어를 조회, 검색어를 포함한 페이지를 찾기
검색 - 인덱스에서 결과를 수집 및 검색어와 가장 관려된 페이지 식별

### Stack
스택은 리스트와 유사한 자료구조로, 요소의 순서를 유지한다. 그리고 리스트와 차이는 메서드가 더 적다는 점이다.

- push : 스택의 최상단에 요소 추가
- pop 스택의 최상단의 요소를 제거 및 반환
- peek 최상단의 요소를 반환 하지만 스택 수정 X
- isEmpty 스택이 비었는지 확인

스택은 항상 최상단의 요소만 반환하기에 LIFO로도 불린다.

#### 왜 모든 경우에 리스트를 사용하지 않는가
- 작은 API 코드는 가독성이 높아지고, 오류 발생가능성이 줄어든다.
- 자료구조에서 작은 API를 제공하면 효율적으로 구현하기가 더 쉽다.

### 간단한 크롤러 만들기
이 책을 읽으면서 chapter 07에 Wikipedia에서 링크들을 이용하여 크롤러를 만드는 실습이 있었다. 
```java
final static List<String> visited = new ArrayList<String>();
final static WikiFetcher wf = new WikiFetcher();
String url = source;
    	for(int i =0;i<limit;i++) {
    	   	if(visited.contains(url)) {
    	   		System.out.println("ERR loop");
    	   		return;
    	   	}
    	   	else {
    	   		visited.add(url);
    	   		
    	   		Elements paragraphs= wf.fetchWikipedia(url);
    	   		WikiParser parser = new WikiParser(paragraphs);
    	   		
    	   		Element el = parser.findFirstLink();
    	   		if(el == null) {
    	   			System.out.println("no vaild");
    	   			return;
    	   		}
    	   		System.out.println("next link : "+el.text());
    	   		url = el.attr("abs:href");
    	   		if(url.equals(destination)) {
    	   			System.out.println("find");
    	   			break;
    	   		}
    	   		
    	   	}
    	}
```
몇가지 부분은 생략하였다.
실제 크롤링을 하는 부분은 이 코드 말고도 wikiParser라는 곳에서 이루어 져있다.

구현 과정을 보면, visited라는 String List 자료구조를 이용하여 크롤링 되는 url을 저장한다. (DFS) 
만약 url을 방문했다면 loop 중인 것으로, 종료를 시켰고, 그렇지 않다면
해당 페이지의 url들을 모두 Wikiparser에서 순회하면서 가장 처음으로 나오는 링크를 추출하여 반복 진행을 하는 형태였다.

## Chapter 08~09
### 인덱스
웹 검색에서 인덱스는 검색어를 바탕으로 관련 페이지를 찾을 수 있게 하는 자료구조에 해당한다. 원하는 검색어가 페이지에 얼마나 등장하는지를 알아내어 관련성이 높은 페이지를 찾을 수 있게 하는것에 해당한다. 
### 인덱스에 필요한 자료구조
인덱스는 위에서 말한 대로 얼마나 등장하는지 즉, 기본적으로 조회를 이용한다. 
### Map 인터페이스
맵 인터페이스는 키-값 쌍의 컬렉션이다. 키값을 안다면 그 키에 해당하는 값을 찾는 빠른 방법을 제공한다. 즉 인덱스에 잘 적용할 수 있는 자료구조가 될것이다.
Map 인터페이스의 메서드는 다음과 같다.
- get(key) : key에 관련된 값을 반환
- put(key, value) : 새 쌍을 추가하거나, 값을 대체

직접 구현시킨 Map 인터페이스의 메서드들
```java
	private Entry findEntry(Object target) {
		// TODO: FILL THIS IN!
		for(Entry entry : entries) {
			if(equals(target,entry.getKey())) {
				return entry;
			}
		}
		return null;
	}
    @Override
	public V put(K key, V value) {
		// TODO: FILL THIS IN!
		Entry entry = findEntry(key);
		if(entry==null) {
			entries.add(new Entry(key,value));
			return null;
			
		}else {
			V oldValue = entry.getValue();
			entry.setValue(value);
			return oldValue;
		}
		
	}
    @Override
	public V remove(Object key) {
		// TODO: FILL THIS IN!
		Entry e = findEntry(key);
		if(e == null) return null;
		else{
			V value = e.getValue();
			entries.remove(e);
			return value;
		}
	}
    @Override
	public V get(Object key) {
		Entry e = findEntry(key);
		if(e==null) return null;
		else return e.getValue();
	}
```
직접 oracle의 공식 문서를 보고 구현하였다. 


map이 좋은 이유는 아마 모든 메서드 구현이 선형시간에 의존한다는 것이다.
즉 자료를 찾는데 시간을 매우 아낄 수 있다는 것이다. 

### Set 인터페이스
Set인터페이스는 교집합 연산이나 다른집합연산을 효율적으로 구현할 수 있는 메서드를 제공한다.
- add(element) : 요소추가(요소가 중복일경우 제외)
- contains(element) : 집합에 요소가 있는지 확인

### 지난번...
지난 Chapter 09를 할때 직접, 선형시간으로 작동하는 LinearMap 클래스를 Map 인터페이스를 통하여 만들어 보았다. 
Chapter 10에서는 이를 더 개선해보기 위해 해싱이라는 것을 써보기로 하였다.
### 해싱을 이용하면 어떻게 구현해야 하는가?
일단 이 클래스는 다음처럼 동작한다. 
1. 새로운 키를 추가한다. (put)
2. 먼저 만들어논 Map 중 하나를 고른다.
3. 만약 같은 키가 있다면 그 키가 어느 맵에 있는지를 찾는다 (get)

이는 간단하게 Map 인터페이스의 기능을 통하여 찾을 수 도 있겠지만, 그렇게 한다면 해싱을 이용하는 의미가 없어진다.

더 효율을 따져야 이 Chapter 10의 효능이 생긴다.

#### Hash function..?
일단 자바의 모든 Object객체는 hash Code 라는 메서드를 이용하여 해시함수를 계산하게 된다.
이 해시함수를 이용하기 위해 다음과 같은 과정을 거친다 한다.

1. 해당 해시코드의 정수를 얻고 절대값으로 만든다.
2. mod map.size()를 하여  map.size()-1사이에 있다는ㄴ 것을 보장한 후 chooseMap()으로 찾아준다.

하지만 이는 뭐 선형시간과 비슷하다. 여기서 더 고쳐야 효율적으로 사용이 가능하다.

#### 책이 이해가 잘 되지 않아...

사실 이부분부터 내 머리속이 가장 복잡해지기 시작하였다.

그래서 천천히 코드를 분석해가면서 왜 어느부분이 상수시간에 의존하고, 막 그러는지 알아보았다.

그러던 중 내가 구현한 Map 클래스는 다음처럼 작동이 된다.

List -> Map -> Entry(MAP)
그리고 이 두번쨰의 Map의 key 값이 바로 Hashcode로 이루어 져있다는 것이다.
일단 이점에서 현재 구현하고 있는 Map.put의 복잡도가 상수시간이라는 것을 알았다.

```java
	@Override
	public V put(K key, V value) {
		MyLinearMap<K, V> map = chooseMap(key);
		return map.put(key, value);
	}
```

다음 이것을 이용하여 Rehash 를 해야하는데 다음과 코드가 같았다.
```java
protected void rehash() {
		List<MyLinearMap<K,V>> oldMaps = maps;
		makeMaps(maps.size()*2);
		
		for(MyLinearMap<K,V> map : oldMaps) {
			for(Entry<K,V> e :map.getEntries()) {
				put(e.getKey(),e.getValue());
			}
		}
	}
```

이 rehash의 구현 조건은 맵의 entry개수/ 맵의 개수 가 특정 숫자를 넘는지에 대해였는데 맵당 평균 엔트리의 개수를 1로 잡는다면 
만약 특정 숫자를 넘길 경우 맵을 2배씩 만들고, 이전 맵의 정보를 새로운 맵으로 바꿔준다.


다음 과정이 맵의 개수가 결국 entry개수에 비례해서 늘어난다는 것이고 이렇게 된다면 상수시간에 가까워진다고 한다.

그냥 어려웠다. 

다시 생각을 해보면 처음 LinearMap에서 가지고 있는 것이
entries 라는 List 구조이고 이 안에 entry라는 우리가 원하는 자료가 들어 있다.

다음 이 LinearMap을 가지고 있는 BetterMap이 있고
maps 라는 List 구조에 LinearMap이 저장되어있다.

즉 어떤 Key 값들은 hashcode가 겹칠 테고, 그 hashcode가 가리키고 있는 Map의 value에서 원하는 entry를 찾는 것이라고 생각을 해본다면?

선형시간이 아닌 상수시간이라는 것이라고 생각을 해볼 수 도 있을것같다.
hash는 정말 도움이 되는 자료구조지만 이해하는데 조금 어려워서 시간을 많이 써봐야 할 것 같다.



### UML클래스 다이어그램
사실 이걸 좀 chapter 앞장에 넣어줬다면 좋았다고 생각했을 것같다.
클래스가 어디소속이고 작동이 어케 되는지 알려는데 시간이 오래 걸렸다.
UML 클래스 다이어그램이란 여러 클래스들이 의존하고 뭉쳐있을때 이 관계들을 추적하는 것에 사용되는 것이다. 
[Class Diagram](https://en.wikipedia.org/wiki/Class_diagram)

### 상수시간이라고 HashMap을 좋아하면...

HashMap 자료구조를 직접 만들어보고 이해해보는데 많은 시간이 걸렸다.
구현된 것을 볼때는 몰랐지만 직접 구현해보니, 상당히 많은 불편한 점을 찾을 수 있었다.
예를 들어 하나의 해시 코드에 해당하는 map 객체의 하위 entry를 찾아야 하는데, 그 entry의 수가 매우 많다던지 한다면 결국 상수시간 같은 것이 의미가 없기도 하고, 그 외에도 여러가지 문제가 생길 수 있겠더라... 생각하였다.

### 생각중..
한 1월 한달동안은 정말 자바를 통한 자료구조에 대해서 계속 파본것같다.

이 책을 접하기 전에 내가 전에 배웠던 자료구조들을 그냥 사용하는 것에서만 생각을 했지, 이것을 직접 인터페이스만으로 구현한다고는 상상도 못했다.

오히려 이것이 이 자료구조의 시간복잡도나 구현과정 등등에 대해서 더 잘 알아 갈 수 있는 좋은 기회가 된 것같다.

### 생각은 그만하고, HashMap은 생각보다 안좋을 수도 있다. 그러면?
HashMap은 생각보다 안좋을 수 있다.이를 해결하기 위해서 자바의 클래스 중...
TreeMap이라는 것이 있다고 한다. 
일단 TreeMap의 장점은 다음과 같다고 한다.
- 해시 함수를 사용하지 않는다.
- 이진트리에 V가 저장되고, 이를 선형시간으로 순회가능하다
- 대부분의 실행시간이 log N 이다. 

### 이진탐색트리

이진 탐색트리는 Binary Search Tree의 약자로 BST라고 불리면서 다음과 같은 성질을 지닌다.
1. 노드 왼쪼에 자식이 있다면 왼쪽 하위 트리의 모든 키는 노드의 있는 키보다 작음.
2. 노드의 오른쪽에 자식이 있다면 오른쪽 하위 트리의 모든 키는 노드에 있는 키보다 큼.

이 BST를 이용하여 TreeMap을 구현할 수 있다고 한다.

### 구현
트리에 알맞게 해당 클래스는 node 안에 key와 value 그리고 자식노드를 가리키는 left, right node도 저장할 수 있게 되어있다.

```java
// key를 이용한 노드 찾기
		Comparable<? super K> k = (Comparable<? super K>) target;
		Node node = root;
		while(node != null) {
			if(k.compareTo(node.key)>0) {
				node = node.right;
			}
			else if(k.compareTo(node.key)<0) {
				node = node.left;
			}
			else return node;
		}
       @Override
	public boolean containsValue(Object target) {
		return containsValueHelper(root, target);
	}

	private boolean containsValueHelper(Node node, Object target) {
		if(node==null) return false;
		if((node.value).equals(target)) return true;
		if(containsValueHelper(node.left,target)) return true;
		if(containsValueHelper(node.right,target)) return true;
		return false;
	}
	@Override
	public V put(K key, V value) {
		if (key == null) {
			throw new NullPointerException();
		}
		if (root == null) {
			root = new Node(key, value);
			size++;
			return null;
		}
		return putHelper(root, key, value);
	}

	private V putHelper(Node node, K key, V value) {
		Comparable<? super K> k = (Comparable<? super K>) key;
		if(k.compareTo(node.key)>0) {
			if(node.right == null ) {
				node.right = new Node(key, value);
				size++;
				return null;
			} else {
				return putHelper(node.right,key,value);
			}
		}
		else if(k.compareTo(node.key)<0) {
			if(node.left == null ) {
				node.left = new Node(key, value);
				size++;
				return null;
			}
			else {
				return putHelper(node.left,key,value);
			}
		}
		else {
			V oldv = node.value;
			node.value = value;
			return oldv;
		}
	}
```

### 자료구조를 공부해보면서...

이 책에서 배울 수 있는 자료구조는 이제 끝이 났다.

정리를 해보자면 다음과 같다.

List, Set, Stack, Queue, Map 다음 5개를 배웠다.
다음 구조를 이용하여 

ArrayList, LinkedList 를 구현하였고,
LinearMap, BetterMap(LinearMap에서 개선), HashMap, TreeMap을 직접 구현해보는 시간을 가졌다.

또한 각각의 자료구조들을 직접 클래스로 구현해보면서 어느상황에서 사용하면 좋을지 몸소 체험할 수 있었다. 

이제 이 책의 남은 챕터들은 위키피디아 크롤링에 관한 내용들이다. 1월 초부터 시작해서 1월 중반까지 자바를 이용한 다양한 자료구조들을 공부하고 구현할 수 있는 좋은 기회였다.

