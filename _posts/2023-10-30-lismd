---
layout: post
title:  "알고리즘 - LIS"
categories: algorithm dynamic-programming
use_math: true
---

Topic : 최장 증가 부분 수열, 동적프로글

#### 최장 증가 부분 수열
LIS( Longest Increasing Subsequence)란 임의 수열에서 x개의 수를 제거하여 오름차순으로 정렬된 가장 긴 수열을 의미한다.

예시로 수열 {1,3,2,5,7} 이 있다면 이때 2를 빼거나 3을 빼서 가장 긴 부분수열을 구할 수 있다.

#### 알고리즘 구현

LIS 문제는 dynamic programming을 통해 풀어나갈 수 있다.

$ D[i] : 수열의 i 번째 수까지의 LIS $ 라고 한다면

 $ D[i] = \mathbf{MAX_{j=0}^{i}} (D[i], D[j]+1) (\mathit{when} A[i] > A[j])$ 
 
 이라고 둘수 있다.

---
### 관련 문제

#### 가장 긴 증가하는 부분 수열 BOJ 11053
- 위의 점화식 이용

~~~cpp
#include <iostream>
#include <vector>
using namespace std;

int main(void){
    int N;
    int dp[1001];
    int maxi = 0;
    cin >> N;
    vector<int> A;
    
    for(int i = 0;i<N;i++){
        int a; cin >> a;
        A.push_back(a);
    }
    for(int i = 0;i<N;i++){
        dp[i] = 1;
        for(int j = 0;j<i;j++){
            if(A[i] > A[j]){
                dp[i] = max(dp[i], dp[j]+1);
            }
        }
        maxi = max(dp[i], maxi);
    }
    cout << maxi<<'\n';
}
~~~

#### 가장 긴 증가하는 부분 수열 5 BOJ 14003

- 위에서 나온 식을 사용하는 경우 TLE
- 이분탐색으로 $O(n\log n)$ 안에 해결 가능
- 각 수열의 수에 인덱스 정보 저장해서 사용

~~~cpp
#include <iostream>
#include <algorithm>
using namespace std;

int arr[1000001];
int  dp[1000001];
int IDX[1000001];
int ANS[1000001];

int main(void){
    int N;
    
    int idx = 0;
    cin >> N;
    for(int i = 0;i<N;i++){
        int a; cin >> a;
        arr[i] = a;
        if(idx == 0) {dp[idx++] = a; IDX[i] = 0;}
        else{
            if(dp[idx-1] < a) {
                IDX[i] = idx;
                dp[idx++] = a;

            }
            else{
                dp[lower_bound(dp,dp+idx,a)-dp] = a;
                IDX[i] = lower_bound(dp,dp+idx,a)-dp;
            }
        }
        
    }
    cout << idx << '\n';
    int j = 0;
    for(int i = N-1;i>=0;i--){
        if(idx == IDX[i]+1){
            ANS[j++] = arr[i];
            idx--;
        }
    }
    for(int i = j-1;i>=0;i--){
        cout << ANS[i] << " ";
    }    
}
~~~